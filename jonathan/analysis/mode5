# Previous ideas:
# For each melody attempt: 
# How far into the melody we go (cause some people restart a lot)
# Time to complete melody (bc of playback controls)
# Number of times using playback controls
# Average time between hearing and playing
# Missed notes
# Speed


# For each melody attempt (before finishing or restarting), get the total time, total mistakes, how far into the melody they went

# Average time / notes
# Slope time / notes
# Average mistakes / notes
# Slope mistakes / notes
# ^Actually the above probably aren't necessary

# Fastest speed with <5 mistakes (Maybe not 5, figure this out later)
# Number of mistakes at aforementioned speed
# Number of playback controls used at aforementioned speed

# Note: perhaps playback controls will mess things up for calculating the fastest speed


# New plan:
# For the BEST ATTEMPT (figure out how to choose this later)
# speed
# mistakes
# playback controls
# time to learn how to play it like this

# Realistically, the best attempt will probably end up being the last attempt
# Perhaps do it as whichever has the lowest speed*(mistakes+2)
# For now, just print out all of the full attempts, and look at them and decide if there's any tough choices


import matplotlib.pyplot as plt
from openpyxl import load_workbook
from statistics import mean
from os import listdir
import numpy as np
import json

mode = 5
willPlot = False

startRow = 47
workbook = load_workbook(filename="C:\\Users\\jlane\\Google Drive\\My Files\\McGill University\\Shared Reality Lab\\Thesis\\McGill Study\\Analysis.xlsx")
sheet = workbook.active

for subject in range(4,5): # 1 to 6
  for session in range(1,3): # 1 to 2

    allFiles = listdir(f"C:\\Users\\jlane\\Google Drive\\My Files\\McGill University\\Shared Reality Lab\\Thesis\\McGill Study\\Subject {subject}\\Session {session}")
    files = [f for f in allFiles if f[-1] == str(mode)]

    # TODO Get time when they first started mode 3

    results = [] # speed, mistakes, playback controls
    for fileName in files:
      f = open(f"C:\\Users\\jlane\\Google Drive\\My Files\\McGill University\\Shared Reality Lab\\Thesis\\McGill Study\\Subject {subject}\\Session {session}\\{fileName}", "r")

      vibration = []
      midi = []
      melodyNum = 0
      melody = []
      speed = 0

      text = f.readline()
      while text:
        if "MIDI" in text:
          midi.append((int(text[5:7]), int(text[11:30])))
        elif "Vibrate" in text:
          extraSpace = 0 if text[9] == "," else 1
          vibration.append((int(text[8:(9 + extraSpace)]), int(text[(15+extraSpace):(34+extraSpace)]), int(text[10 + extraSpace])))
        elif "Computer Key.space" in text:
          midi.append((41, int(text[22:41])))
        elif "Computer '\\\\'" in text:
          midi.append((41, int(text[17:36])))
        elif "Melody" in text:
          melodyNum = int(text[7])
          melody = json.loads(text[10:])
        elif "Speed" in text:
          speed = float(text[6:])

        text = f.readline()

      i = 0 # Counter for Vibration data
      j = 0 # Counter for MIDI data
      numMistakes = 0
      numPlaybackControls = 0

      for i in range(len(vibration)):
        foundNote = False

        # Move j to correct index, if it's currently too far behind
        while (j < len(midi) and midi[j][1] <= vibration[i][1]):
          if midi[j][0] in [38, 40, 41]: # Not including restart melody or play
            numPlaybackControls = numPlaybackControls + 1
          elif midi[j][0] == 36:
            numMistakes = 0
            numPlaybackControls = 0
          j = j + 1

        previousJ = j # j before we start searching through midi notes
        tempMistakes = 0 # Only apply mistakes once we know that we do eventually find the correct note

        # Go through midi notes and see if we play the correct note, until we're 4 seconds in the future 
        # (or we find the correct note)
        while (j < len(midi) and (i == len(vibration)-1 or midi[j][1] <= vibration[i][1] + 1000000000*4) and not foundNote):
          if vibration[i][0] == midi[j][0] - 60 and midi[j][1] > vibration[i][1]: # If the correct note
            numMistakes = numMistakes + tempMistakes
            foundNote = True
          elif midi[j][0] in [38, 40, 41]: # Not including restart melody or play
            numPlaybackControls = numPlaybackControls + 1
          elif midi[j][0] == 36: # Restart melody
            numMistakes = 0
            numPlaybackControls = 0
            foundNote = True # Time to move on
          else:
            tempMistakes = tempMistakes + 1
          j = j + 1

        # If we don't play the correct note, move j back to where it used to be
        if not foundNote:
          numMistakes = numMistakes + 1 # A mistake for not finding the correct note
          while (j > previousJ):
            if midi[j][0] in [38, 40, 41]: # Not including restart melody or play
              numPlaybackControls = numPlaybackControls - 1 # There's a bug with this. numPlaybackControls is wrong
            j = j - 1

        # The next code is me trying to figure out whether we've finished the melody or not
        # TODO Instead of this gross code, check with melody number
        # If the note is the final melody note, we've done at least enough vibrations, the next vibration doesn't happen for a while, and the next midi isn't pause (41) or if it is, it's a while before the pause
        isDone = True
        isDone = isDone and vibration[i][0] == melody[-1][0]
        isDone = isDone and i >= len(melody) - 1     
        isDone = isDone and (i == len(vibration) - 1 or (vibration[i+1][1] - vibration[i][1])/1000000000 > speed/2.0*1.1) # Hopefully this works
        isDone = isDone and (j == len(midi) or (midi[j][0] != 41 or (midi[j][1]-vibration[i][1])/1000000000 > speed/2.0*1.1))

        if (isDone):
          results.append((speed, numMistakes, numPlaybackControls-1)) # Subtract 1 because they all start with 1
          numMistakes = 0
          numPlaybackControls = 0

    print(results)

    # From here, get the best result, calculate the total time from when they first started with mode 3, and output values



    # sheet.cell(startRow, subject*2 + session - 1).value = melodyNum
    # sheet.cell(startRow+1, subject*2 + session - 1).value = hapticsFirst
    # if len(results) == 0:
    #   continue
    # sheet.cell(startRow+2, subject*2 + session - 1).value = mean(a[0] for a in results)
    # sheet.cell(startRow+4, subject*2 + session - 1).value = mean(a[1] for a in results)

# workbook.save(filename="C:\\Users\\jlane\\Google Drive\\My Files\\McGill University\\Shared Reality Lab\\Thesis\\McGill Study\\Analysis.xlsx")
