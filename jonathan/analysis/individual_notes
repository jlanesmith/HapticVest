import matplotlib.pyplot as plt
from openpyxl import load_workbook
from statistics import mean
from os import listdir
import numpy as np
from collections import defaultdict


startRow = 4

workbook = load_workbook(filename="C:\\Users\\jlane\\Google Drive\\My Files\\McGill University\\Shared Reality Lab\\Thesis\\Analysis.xlsx")
workbook.active = 1
sheet = workbook.active

for subject in range(1,12): # 1 to 11

  results = []  # note, category, delta time, num mistakes

  maxSession = 4 if subject != 11 else 2 # For Dad lol
  for session in range(1,maxSession): # 1 to 3

    allFiles = listdir(f"C:\\Users\\jlane\\Google Drive\\My Files\\McGill University\\Shared Reality Lab\\Thesis\\Data for Analysis\\Subject {subject}\\Session {session}")
    files = [f for f in allFiles if f[-1] in ["1", "2"]]


    for fileName in files:
      f = open(f"C:\\Users\\jlane\\Google Drive\\My Files\\McGill University\\Shared Reality Lab\\Thesis\\Data for Analysis\\Subject {subject}\\Session {session}\\{fileName}", "r")

      vibration = []
      midi = []
      alreadyVibrated = False
      text = f.readline()
      while text:
        if "MIDI" in text and text[5:7] != "41":
          midi.append((int(text[5:7]), int(text[11:30])))
          if len(vibration) > 0 and int(text[5:7]) - 60 == vibration[-1][0]: # If the correct note is played
            alreadyVibrated = False
        elif "Vibrate" in text:
          if not (alreadyVibrated and len(vibration) > 0): # Skip if it's a repeat vibration
            extraSpace = 0 if text[9] == "," else 1
            vibration.append([int(text[8:(9 + extraSpace)]), int(text[(15+extraSpace):(34+extraSpace)]), int(text[10 + extraSpace]), False]) # Note, time, duration, isOctaveIndication
          alreadyVibrated = True
        elif "Octave" in text:
          vibration[-1][3] = True
        text = f.readline()

      i = 0 # Counter for Vibration data
      j = 0 # Counter for MIDI data

      for i in range(len(vibration)):
        foundNote = False
        numMistakes = 0
        while (not foundNote and j < len(midi)):
          if vibration[i][0] == midi[j][0] - 60 and midi[j][1] > vibration[i][1]: # If the correct note
            category = "simple"
            if vibration[i][3]:
              category = "octave"
            elif ((vibration[i][0] >= 12) != (vibration[i-1][0] >= 12) and not vibration[i][3]):
              category = "crossing"
            results.append((vibration[i][0], category, (midi[j][1]-vibration[i][1])/1000000000, numMistakes))
            j = j + 1
            foundNote = True
          else:
            numMistakes = numMistakes + 1
            j = j + 1

  if len(results) == 0:
    continue

  noteDict = defaultdict(lambda : [0,0,0]) # note: time, mistakes, count
  for result in results:
    current = noteDict[result[0]%12]
    noteDict[result[0]%12] = [current[0]+result[2], current[1]+result[3], current[2]+1]

  mappingToSheet = [0,0,1,1,2,3,3,4,4,5,5,6]

  for note in noteDict:
    sheet.cell(startRow + mappingToSheet[int(note)], subject + 1).value = noteDict[note][0]/noteDict[note][2]
    sheet.cell(startRow + mappingToSheet[int(note)] + 8, subject + 1).value = noteDict[note][1]/noteDict[note][2]

workbook.save(filename="C:\\Users\\jlane\\Google Drive\\My Files\\McGill University\\Shared Reality Lab\\Thesis\\Analysis.xlsx")
