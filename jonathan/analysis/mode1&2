import matplotlib.pyplot as plt
from openpyxl import load_workbook
from statistics import mean
from os import listdir
import numpy as np

mode = 1
willPlot = False

startRow = 11 if mode == 1 else 25

workbook = load_workbook(filename="C:\\Users\\jlane\\Google Drive\\My Files\\McGill University\\Shared Reality Lab\\Thesis\\McGill Study\\Analysis.xlsx")
sheet = workbook.active

for subject in range(1,2): # 1 to 6
  for session in range(1,2): # 1 to 2

    allFiles = listdir(f"C:\\Users\\jlane\\Google Drive\\My Files\\McGill University\\Shared Reality Lab\\Thesis\\McGill Study\\Subject {subject}\\Session {session}")
    files = [f for f in allFiles if f[-1] == str(mode)]

    # note, delta time, sweep, num mistakes
    results = []

    for fileName in files:
      f = open(f"C:\\Users\\jlane\\Google Drive\\My Files\\McGill University\\Shared Reality Lab\\Thesis\\McGill Study\\Subject {subject}\\Session {session}\\{fileName}", "r")

      vibration = []
      midi = []

      alreadyVibrated = False
      text = f.readline()
      while text:
        # Following commented out code doesn't work for Brady or Cameron so I added the if block 5 lines lower
        # if "Audio correct" in text:
        #   alreadyVibrated = False
        if "MIDI" in text and text[5:7] != "41":
          midi.append((int(text[5:7]), int(text[11:30])))
          if len(vibration) > 0 and int(text[5:7]) - 60 == vibration[-1][0]:
            alreadyVibrated = False
        elif "Vibrate" in text:
          if not (alreadyVibrated and len(vibration) > 0): # Skip if it's a repeat vibration
            extraSpace = 0 if text[9] == "," else 1
            vibration.append((int(text[8:(9 + extraSpace)]), int(text[(15+extraSpace):(34+extraSpace)]), int(text[10 + extraSpace])))
          alreadyVibrated = True
        text = f.readline()

      i = 0 # Counter for Vibration data
      j = 0 # Counter for MIDI data

      for i in range(len(vibration)):
        foundNote = False
        numMistakes = 0
        while (not foundNote and j < len(midi)):
          if vibration[i][0] == midi[j][0] - 60 and midi[j][1] > vibration[i][1]: # If the correct note
            isSweep = i > 0 and ((vibration[i][0] >= 12) != (vibration[i-1][0] >= 12))
            results.append((vibration[i][0], (midi[j][1]-vibration[i][1])/1000000000, isSweep, numMistakes))
            j = j + 1
            foundNote = True
          else:
            numMistakes = numMistakes + 1
            j = j + 1

    if len(results) == 0:
      continue

    sweepResults = [a for a in results if a[2]]
    noSweepResults = [a for a in results if not a[2]]

    sheet.cell(startRow,   subject*2 + session - 1).value = mean(a[1] for a in results)
    sheet.cell(startRow+1, subject*2 + session - 1).value = mean(a[1] for a in sweepResults)
    sheet.cell(startRow+2, subject*2 + session - 1).value = mean(a[1] for a in noSweepResults)

    sheet.cell(startRow+6, subject*2 + session - 1).value = mean(a[3] for a in results)
    sheet.cell(startRow+7, subject*2 + session - 1).value = mean(a[3] for a in sweepResults)
    sheet.cell(startRow+8, subject*2 + session - 1).value = mean(a[3] for a in noSweepResults)

    for index, i in enumerate([results, sweepResults, noSweepResults]):
      x = range(len(i))
      y = [a[1] for a in i]
      line = np.polyfit(x, y, 1)
      y_line = x*line[0] + line[1]

      # Multiply slope by number of data points so it's more proportional
      sheet.cell(startRow + 3 + index, subject*2 + session - 1).value = line[0]*len(i)

      if willPlot:
        plt.plot(x, y_line, 1)
        plt.plot([a[1] for a in i], label=subject)

        plt.legend()
        plt.ylabel("Time")
        plt.title(f"Time for {['results', 'sweepResults', 'noSweepResults'][index]}")
        plt.show()

      x = range(len(i))
      y = [a[3] for a in i]
      line = np.polyfit(x, y, 1)
      y_line = x*line[0] + line[1]
      sheet.cell(startRow + 9 + index, subject*2 + session - 1).value = line[0]*len(i)

      if willPlot:
        plt.plot(x, y_line, 1)
        plt.plot([a[3] for a in i], label=subject)

        plt.legend()
        plt.ylabel("Mistakes")
        plt.title(f"Mistakes for {['results', 'sweepResults', 'noSweepResults'][index]}")
        plt.show()

workbook.save(filename="C:\\Users\\jlane\\Google Drive\\My Files\\McGill University\\Shared Reality Lab\\Thesis\\McGill Study\\Analysis.xlsx")
