import matplotlib.pyplot as plt
from openpyxl import load_workbook
from statistics import mean
from os import listdir
import numpy as np

mode = 2

startRow = 13 if mode == 1 else 23

workbook = load_workbook(filename="C:\\Users\\jlane\\Google Drive\\My Files\\McGill University\\Shared Reality Lab\\Thesis\\Analysis.xlsx")
workbook.active = 0
sheet = workbook.active

for subject in range(1,11): # 1 to 11

  outlierThreshold = 60 if (subject != 9) else 30 # Cause Jeff talked a lot during the first session, but wasn't as bad as others
  maxSession = 4 if subject != 11 else 2 # For Dad lol
  for session in range(1,4): # 1 to 3

    willPlot = False
    allFiles = listdir(f"C:\\Users\\jlane\\Google Drive\\My Files\\McGill University\\Shared Reality Lab\\Thesis\\Data for Analysis\\Subject {subject}\\Session {session}")
    files = [f for f in allFiles if f[-1] == str(mode)]

    results = []  # note, category, delta time, num mistakes

    for fileName in files:
      f = open(f"C:\\Users\\jlane\\Google Drive\\My Files\\McGill University\\Shared Reality Lab\\Thesis\\Data for Analysis\\Subject {subject}\\Session {session}\\{fileName}", "r")

      vibration = []
      midi = []
      alreadyVibrated = False
      text = f.readline()
      while text:
        if "MIDI" in text and text[5:7] != "41":
          midi.append((int(text[5:7]), int(text[11:30])))
          if len(vibration) > 0 and int(text[5:7]) - 60 == vibration[-1][0]: # If the correct note is played
            alreadyVibrated = False
        elif "Vibrate" in text:
          if not (alreadyVibrated and len(vibration) > 0): # Skip if it's a repeat vibration
            extraSpace = 0 if text[9] == "," else 1
            vibration.append([int(text[8:(9 + extraSpace)]), int(text[(15+extraSpace):(34+extraSpace)]), int(text[10 + extraSpace]), False]) # Note, time, duration, isOctaveIndication
          alreadyVibrated = True
        elif "Octave" in text:
          vibration[-1][3] = True
        text = f.readline()

      i = 0 # Counter for Vibration data
      j = 0 # Counter for MIDI data

      for i in range(len(vibration)):
        foundNote = False
        numMistakes = 0
        while (not foundNote and j < len(midi)):
          if vibration[i][0] == midi[j][0] - 60 and midi[j][1] > vibration[i][1]: # If the correct note
            category = "simple"
            if vibration[i][3]:
              category = "octave"
            elif ((vibration[i][0] >= 12) != (vibration[i-1][0] >= 12) and not vibration[i][3]):
              category = "crossing"
            if (midi[j][1]-vibration[i][1])/1000000000 < outlierThreshold:
              results.append((vibration[i][0], category, (midi[j][1]-vibration[i][1])/1000000000, numMistakes))
            j = j + 1
            foundNote = True
          else:
            numMistakes = numMistakes + 1
            j = j + 1

    if len(results) == 0:
      continue

    simpleResults = [a for a in results if a[1] == "simple"]
    octaveResults = [a for a in results if a[1] == "octave"]
    crossingResults = [a for a in results if a[1] == "crossing"]

    def getMean(data):
      if len(data) == 0:
        return ""
      else:
        return mean(data)

    sheet.cell(startRow,   subject*3 + session - 2).value = getMean([a[2] for a in results])
    sheet.cell(startRow+1, subject*3 + session - 2).value = getMean([a[2] for a in simpleResults])
    sheet.cell(startRow+2, subject*3 + session - 2).value = getMean([a[2] for a in octaveResults])
    sheet.cell(startRow+3, subject*3 + session - 2).value = getMean([a[2] for a in crossingResults])
    sheet.cell(startRow+4, subject*3 + session - 2).value = getMean([a[3] for a in results])
    sheet.cell(startRow+5, subject*3 + session - 2).value = getMean([a[3] for a in simpleResults])
    sheet.cell(startRow+6, subject*3 + session - 2).value = getMean([a[3] for a in octaveResults])
    sheet.cell(startRow+7, subject*3 + session - 2).value = getMean([a[3] for a in crossingResults])

    for index, i in enumerate([results, simpleResults, octaveResults, crossingResults]):

      if willPlot:

        plt.plot([a[2] for a in i], label=subject) # Time

        plt.legend()
        plt.ylabel("Time")
        plt.title(f"Time for {['results', 'simpleResults', 'octaveResults', 'crossingResults'][index]}")
        plt.show()

      if willPlot:
        plt.plot([a[3] for a in i], label=subject) # Mistakes

        plt.legend()
        plt.ylabel("Mistakes")
        plt.title(f"Mistakes for {['results', 'simpleResults', 'octaveResults', 'crossingResults'][index]}")
        plt.show()

workbook.save(filename="C:\\Users\\jlane\\Google Drive\\My Files\\McGill University\\Shared Reality Lab\\Thesis\\Analysis.xlsx")
